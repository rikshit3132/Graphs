import java.util.ArrayList;
import java.util.PriorityQueue;

public class Prims {
static class Edge{
    int src,des,wt;
    Edge(int s,int d,int wt){
        this.src=s;
        this.des=d;
        this.wt=wt;
    }

}    
static void add(ArrayList<Edge> graph[],int v){
    for (int i = 0; i < graph.length; i++) {
        graph[i]=new ArrayList<>();
    }
    graph[0].add(new Edge(0, 1,10));
    graph[0].add(new Edge(0, 2,15));
    graph[0].add(new Edge(0, 3,30));

    graph[1].add(new Edge(1, 0,10));
    graph[1].add(new Edge(1, 3,40));

    graph[2].add(new Edge(2, 0 , 15));
    graph[2].add(new Edge(2, 3, 50));

    graph[3].add(new Edge(3, 0,30));
    graph[3].add(new Edge(3, 1,40));
    graph[3].add(new Edge(3, 2,50));
}
static  class Pair implements Comparable<Pair>{
int node;
int cost;
Pair(int n,int c){
    this.node=n;
    this.cost=c;
}
@Override
public int compareTo(Pair p2){
    return this.cost-p2.cost;//ascending order
}
}
static void primsAlgo(ArrayList<Edge> graph[],int v){
    PriorityQueue<Pair> pq=new PriorityQueue<>();
    boolean[] vis=new boolean[v];
    int primCost=0;
    pq.add(new Pair(0,0));
    while(!pq.isEmpty()){
        Pair curr=pq.remove();
        if(!vis[curr.node]){
            vis[curr.node]=true;
             primCost+=curr.cost;
            for (int i = 0; i < graph[curr.node].size(); i++) {
                Edge e=graph[curr.node].get(i);
                if(!vis[e.des]){
                    pq.add(new Pair(e.des,e.wt));
                }
            }
        }
    }
    System.out.println("Min cost of mst is:"+primCost);
}
public static void main(String[] args) {
    int v=4;
    ArrayList<Edge> graph[]=new ArrayList[v];
    add(graph, v);
    primsAlgo(graph, v);
}
}
